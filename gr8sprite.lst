ca65 V2.19 - Git 4f87c7c
Main file   : gr8sprite.s
Current file: gr8sprite.s

000000r 1               	;; gr8sprite.s
000000r 1               	;;
000000r 1               	;; implements a 256x192 GR8 mode - enabling the use of bytes for coordinates vs. words.
000000r 1               	;;
000000r 1               
000000r 1               	.global _init_fast
000000r 1               	.global _plot_pixel_256
000000r 1               	.global _plot_pixel_256_fast
000000r 1               
000000r 1               	;; page zero locations (stomping all over FP space)
000000r 1               
000000r 1               	destination = $d4	; address of gfx buffer, used by bitmap and copy
000000r 1               	offset256   = $d6	; low byte of 256 column table (uses $d6/$d7)
000000r 1               	basegfx     = $e0	; used to tell the assembler what buffer we're writing to
000000r 1               	xb          = $e2	; used by plot_256, plot_line
000000r 1               	yb          = $e3	; used by plot_256, plot_line
000000r 1               	argument    = $e6	; used by plot (destination pixel)
000000r 1               	fptr        = $f0	; used by init_fast
000000r 1               	lasty		= $f2
000000r 1               	mask		= $f3
000000r 1               
000000r 1               	.data
000000r 1               
000000r 1               	.align 256
000000r 1               
000000r 1  xx xx xx xx  yindexlo:	.res 192
000004r 1  xx xx xx xx  
000008r 1  xx xx xx xx  
0000C0r 1               
0000C0r 1  xx xx xx xx  	.align 256
0000C4r 1  xx xx xx xx  
0000C8r 1  xx xx xx xx  
000100r 1               
000100r 1  xx xx xx xx  yindexhi:	.res 192
000104r 1  xx xx xx xx  
000108r 1  xx xx xx xx  
0001C0r 1               
0001C0r 1  xx xx xx xx  	.align 256
0001C4r 1  xx xx xx xx  
0001C8r 1  xx xx xx xx  
000200r 1               
000200r 1               byteoffset256_table:
000200r 1  04 04 04 04  	.byte 4, 4, 4, 4, 4, 4, 4, 4
000204r 1  04 04 04 04  
000208r 1  05 05 05 05  	.byte 5, 5, 5, 5, 5, 5, 5, 5
00020Cr 1  05 05 05 05  
000210r 1  06 06 06 06  	.byte 6, 6, 6, 6, 6, 6, 6, 6
000214r 1  06 06 06 06  
000218r 1  07 07 07 07  	.byte 7, 7, 7, 7, 7, 7, 7, 7
00021Cr 1  07 07 07 07  
000220r 1  08 08 08 08  	.byte 8, 8, 8, 8, 8, 8, 8, 8
000224r 1  08 08 08 08  
000228r 1  09 09 09 09  	.byte 9, 9, 9, 9, 9, 9, 9, 9
00022Cr 1  09 09 09 09  
000230r 1  0A 0A 0A 0A  	.byte 10, 10, 10, 10, 10, 10, 10, 10
000234r 1  0A 0A 0A 0A  
000238r 1  0B 0B 0B 0B  	.byte 11, 11, 11, 11, 11, 11, 11, 11
00023Cr 1  0B 0B 0B 0B  
000240r 1  0C 0C 0C 0C  	.byte 12, 12, 12, 12, 12, 12, 12, 12
000244r 1  0C 0C 0C 0C  
000248r 1  0D 0D 0D 0D  	.byte 13, 13, 13, 13, 13, 13, 13, 13
00024Cr 1  0D 0D 0D 0D  
000250r 1  0E 0E 0E 0E  	.byte 14, 14, 14, 14, 14, 14, 14, 14
000254r 1  0E 0E 0E 0E  
000258r 1  0F 0F 0F 0F  	.byte 15, 15, 15, 15, 15, 15, 15, 15
00025Cr 1  0F 0F 0F 0F  
000260r 1  10 10 10 10  	.byte 16, 16, 16, 16, 16, 16, 16, 16
000264r 1  10 10 10 10  
000268r 1  11 11 11 11  	.byte 17, 17, 17, 17, 17, 17, 17, 17
00026Cr 1  11 11 11 11  
000270r 1  12 12 12 12  	.byte 18, 18, 18, 18, 18, 18, 18, 18
000274r 1  12 12 12 12  
000278r 1  13 13 13 13  	.byte 19, 19, 19, 19, 19, 19, 19, 19
00027Cr 1  13 13 13 13  
000280r 1  14 14 14 14  	.byte 20, 20, 20, 20, 20, 20, 20, 20
000284r 1  14 14 14 14  
000288r 1  15 15 15 15  	.byte 21, 21, 21, 21, 21, 21, 21, 21
00028Cr 1  15 15 15 15  
000290r 1  16 16 16 16  	.byte 22, 22, 22, 22, 22, 22, 22, 22
000294r 1  16 16 16 16  
000298r 1  17 17 17 17  	.byte 23, 23, 23, 23, 23, 23, 23, 23
00029Cr 1  17 17 17 17  
0002A0r 1  18 18 18 18  	.byte 24, 24, 24, 24, 24, 24, 24, 24
0002A4r 1  18 18 18 18  
0002A8r 1  19 19 19 19  	.byte 25, 25, 25, 25, 25, 25, 25, 25
0002ACr 1  19 19 19 19  
0002B0r 1  1A 1A 1A 1A  	.byte 26, 26, 26, 26, 26, 26, 26, 26
0002B4r 1  1A 1A 1A 1A  
0002B8r 1  1B 1B 1B 1B  	.byte 27, 27, 27, 27, 27, 27, 27, 27
0002BCr 1  1B 1B 1B 1B  
0002C0r 1  1C 1C 1C 1C  	.byte 28, 28, 28, 28, 28, 28, 28, 28
0002C4r 1  1C 1C 1C 1C  
0002C8r 1  1D 1D 1D 1D  	.byte 29, 29, 29, 29, 29, 29, 29, 29
0002CCr 1  1D 1D 1D 1D  
0002D0r 1  1E 1E 1E 1E  	.byte 30, 30, 30, 30, 30, 30, 30, 30
0002D4r 1  1E 1E 1E 1E  
0002D8r 1  1F 1F 1F 1F  	.byte 31, 31, 31, 31, 31, 31, 31, 31
0002DCr 1  1F 1F 1F 1F  
0002E0r 1  20 20 20 20  	.byte 32, 32, 32, 32, 32, 32, 32, 32
0002E4r 1  20 20 20 20  
0002E8r 1  21 21 21 21  	.byte 33, 33, 33, 33, 33, 33, 33, 33
0002ECr 1  21 21 21 21  
0002F0r 1  22 22 22 22  	.byte 34, 34, 34, 34, 34, 34, 34, 34
0002F4r 1  22 22 22 22  
0002F8r 1  23 23 23 23  	.byte 35, 35, 35, 35, 35, 35, 35, 35
0002FCr 1  23 23 23 23  
000300r 1               
000300r 1               	.align 256
000300r 1               
000300r 1               byteoffset_table:
000300r 1  00 00 00 00  	.byte 0, 0, 0, 0, 0, 0, 0, 0
000304r 1  00 00 00 00  
000308r 1  01 01 01 01  	.byte 1, 1, 1, 1, 1, 1, 1, 1
00030Cr 1  01 01 01 01  
000310r 1  02 02 02 02  	.byte 2, 2, 2, 2, 2, 2, 2, 2
000314r 1  02 02 02 02  
000318r 1  03 03 03 03  	.byte 3, 3, 3, 3, 3, 3, 3, 3
00031Cr 1  03 03 03 03  
000320r 1  04 04 04 04  	.byte 4, 4, 4, 4, 4, 4, 4, 4
000324r 1  04 04 04 04  
000328r 1  05 05 05 05  	.byte 5, 5, 5, 5, 5, 5, 5, 5
00032Cr 1  05 05 05 05  
000330r 1  06 06 06 06  	.byte 6, 6, 6, 6, 6, 6, 6, 6
000334r 1  06 06 06 06  
000338r 1  07 07 07 07  	.byte 7, 7, 7, 7, 7, 7, 7, 7
00033Cr 1  07 07 07 07  
000340r 1  08 08 08 08  	.byte 8, 8, 8, 8, 8, 8, 8, 8
000344r 1  08 08 08 08  
000348r 1  09 09 09 09  	.byte 9, 9, 9, 9, 9, 9, 9, 9
00034Cr 1  09 09 09 09  
000350r 1  0A 0A 0A 0A  	.byte 10, 10, 10, 10, 10, 10, 10, 10
000354r 1  0A 0A 0A 0A  
000358r 1  0B 0B 0B 0B  	.byte 11, 11, 11, 11, 11, 11, 11, 11
00035Cr 1  0B 0B 0B 0B  
000360r 1  0C 0C 0C 0C  	.byte 12, 12, 12, 12, 12, 12, 12, 12
000364r 1  0C 0C 0C 0C  
000368r 1  0D 0D 0D 0D  	.byte 13, 13, 13, 13, 13, 13, 13, 13
00036Cr 1  0D 0D 0D 0D  
000370r 1  0E 0E 0E 0E  	.byte 14, 14, 14, 14, 14, 14, 14, 14
000374r 1  0E 0E 0E 0E  
000378r 1  0F 0F 0F 0F  	.byte 15, 15, 15, 15, 15, 15, 15, 15
00037Cr 1  0F 0F 0F 0F  
000380r 1  10 10 10 10  	.byte 16, 16, 16, 16, 16, 16, 16, 16
000384r 1  10 10 10 10  
000388r 1  11 11 11 11  	.byte 17, 17, 17, 17, 17, 17, 17, 17
00038Cr 1  11 11 11 11  
000390r 1  12 12 12 12  	.byte 18, 18, 18, 18, 18, 18, 18, 18
000394r 1  12 12 12 12  
000398r 1  13 13 13 13  	.byte 19, 19, 19, 19, 19, 19, 19, 19
00039Cr 1  13 13 13 13  
0003A0r 1  14 14 14 14  	.byte 20, 20, 20, 20, 20, 20, 20, 20
0003A4r 1  14 14 14 14  
0003A8r 1  15 15 15 15  	.byte 21, 21, 21, 21, 21, 21, 21, 21
0003ACr 1  15 15 15 15  
0003B0r 1  16 16 16 16  	.byte 22, 22, 22, 22, 22, 22, 22, 22
0003B4r 1  16 16 16 16  
0003B8r 1  17 17 17 17  	.byte 23, 23, 23, 23, 23, 23, 23, 23
0003BCr 1  17 17 17 17  
0003C0r 1  18 18 18 18  	.byte 24, 24, 24, 24, 24, 24, 24, 24
0003C4r 1  18 18 18 18  
0003C8r 1  19 19 19 19  	.byte 25, 25, 25, 25, 25, 25, 25, 25
0003CCr 1  19 19 19 19  
0003D0r 1  1A 1A 1A 1A  	.byte 26, 26, 26, 26, 26, 26, 26, 26
0003D4r 1  1A 1A 1A 1A  
0003D8r 1  1B 1B 1B 1B  	.byte 27, 27, 27, 27, 27, 27, 27, 27
0003DCr 1  1B 1B 1B 1B  
0003E0r 1  1C 1C 1C 1C  	.byte 28, 28, 28, 28, 28, 28, 28, 28
0003E4r 1  1C 1C 1C 1C  
0003E8r 1  1D 1D 1D 1D  	.byte 29, 29, 29, 29, 29, 29, 29, 29
0003ECr 1  1D 1D 1D 1D  
0003F0r 1  1E 1E 1E 1E  	.byte 30, 30, 30, 30, 30, 30, 30, 30
0003F4r 1  1E 1E 1E 1E  
0003F8r 1  1F 1F 1F 1F  	.byte 31, 31, 31, 31, 31, 31, 31, 31
0003FCr 1  1F 1F 1F 1F  
000400r 1  20 20 20 20  	.byte 32, 32, 32, 32, 32, 32, 32, 32
000404r 1  20 20 20 20  
000408r 1  21 21 21 21  	.byte 33, 33, 33, 33, 33, 33, 33, 33
00040Cr 1  21 21 21 21  
000410r 1  22 22 22 22  	.byte 34, 34, 34, 34, 34, 34, 34, 34
000414r 1  22 22 22 22  
000418r 1  23 23 23 23  	.byte 35, 35, 35, 35, 35, 35, 35, 35
00041Cr 1  23 23 23 23  
000420r 1  24 24 24 24  	.byte 36, 36, 36, 36, 36, 36, 36, 36
000424r 1  24 24 24 24  
000428r 1  25 25 25 25  	.byte 37, 37, 37, 37, 37, 37, 37, 37
00042Cr 1  25 25 25 25  
000430r 1  26 26 26 26  	.byte 38, 38, 38, 38, 38, 38, 38, 38
000434r 1  26 26 26 26  
000438r 1  27 27 27 27  	.byte 39, 39, 39, 39, 39, 39, 39, 39
00043Cr 1  27 27 27 27  
000440r 1               
000440r 1  xx xx xx xx  	.align 256
000444r 1  xx xx xx xx  
000448r 1  xx xx xx xx  
000500r 1               
000500r 1               bitmask_table:
000500r 1  80 40 20 10  	.byte $80, $40, $20, $10, $08, $04, $02, $01
000504r 1  08 04 02 01  
000508r 1  80 40 20 10  	.byte $80, $40, $20, $10, $08, $04, $02, $01
00050Cr 1  08 04 02 01  
000510r 1  80 40 20 10  	.byte $80, $40, $20, $10, $08, $04, $02, $01
000514r 1  08 04 02 01  
000518r 1  80 40 20 10  	.byte $80, $40, $20, $10, $08, $04, $02, $01
00051Cr 1  08 04 02 01  
000520r 1  80 40 20 10  	.byte $80, $40, $20, $10, $08, $04, $02, $01
000524r 1  08 04 02 01  
000528r 1  80 40 20 10  	.byte $80, $40, $20, $10, $08, $04, $02, $01
00052Cr 1  08 04 02 01  
000530r 1  80 40 20 10  	.byte $80, $40, $20, $10, $08, $04, $02, $01
000534r 1  08 04 02 01  
000538r 1  80 40 20 10  	.byte $80, $40, $20, $10, $08, $04, $02, $01
00053Cr 1  08 04 02 01  
000540r 1  80 40 20 10  	.byte $80, $40, $20, $10, $08, $04, $02, $01
000544r 1  08 04 02 01  
000548r 1  80 40 20 10  	.byte $80, $40, $20, $10, $08, $04, $02, $01
00054Cr 1  08 04 02 01  
000550r 1  80 40 20 10  	.byte $80, $40, $20, $10, $08, $04, $02, $01
000554r 1  08 04 02 01  
000558r 1  80 40 20 10  	.byte $80, $40, $20, $10, $08, $04, $02, $01
00055Cr 1  08 04 02 01  
000560r 1  80 40 20 10  	.byte $80, $40, $20, $10, $08, $04, $02, $01
000564r 1  08 04 02 01  
000568r 1  80 40 20 10  	.byte $80, $40, $20, $10, $08, $04, $02, $01
00056Cr 1  08 04 02 01  
000570r 1  80 40 20 10  	.byte $80, $40, $20, $10, $08, $04, $02, $01
000574r 1  08 04 02 01  
000578r 1  80 40 20 10  	.byte $80, $40, $20, $10, $08, $04, $02, $01
00057Cr 1  08 04 02 01  
000580r 1  80 40 20 10  	.byte $80, $40, $20, $10, $08, $04, $02, $01
000584r 1  08 04 02 01  
000588r 1  80 40 20 10  	.byte $80, $40, $20, $10, $08, $04, $02, $01
00058Cr 1  08 04 02 01  
000590r 1  80 40 20 10  	.byte $80, $40, $20, $10, $08, $04, $02, $01
000594r 1  08 04 02 01  
000598r 1  80 40 20 10  	.byte $80, $40, $20, $10, $08, $04, $02, $01
00059Cr 1  08 04 02 01  
0005A0r 1  80 40 20 10  	.byte $80, $40, $20, $10, $08, $04, $02, $01
0005A4r 1  08 04 02 01  
0005A8r 1  80 40 20 10  	.byte $80, $40, $20, $10, $08, $04, $02, $01
0005ACr 1  08 04 02 01  
0005B0r 1  80 40 20 10  	.byte $80, $40, $20, $10, $08, $04, $02, $01
0005B4r 1  08 04 02 01  
0005B8r 1  80 40 20 10  	.byte $80, $40, $20, $10, $08, $04, $02, $01
0005BCr 1  08 04 02 01  
0005C0r 1  80 40 20 10  	.byte $80, $40, $20, $10, $08, $04, $02, $01
0005C4r 1  08 04 02 01  
0005C8r 1  80 40 20 10  	.byte $80, $40, $20, $10, $08, $04, $02, $01
0005CCr 1  08 04 02 01  
0005D0r 1  80 40 20 10  	.byte $80, $40, $20, $10, $08, $04, $02, $01
0005D4r 1  08 04 02 01  
0005D8r 1  80 40 20 10  	.byte $80, $40, $20, $10, $08, $04, $02, $01
0005DCr 1  08 04 02 01  
0005E0r 1  80 40 20 10  	.byte $80, $40, $20, $10, $08, $04, $02, $01
0005E4r 1  08 04 02 01  
0005E8r 1  80 40 20 10  	.byte $80, $40, $20, $10, $08, $04, $02, $01
0005ECr 1  08 04 02 01  
0005F0r 1  80 40 20 10  	.byte $80, $40, $20, $10, $08, $04, $02, $01
0005F4r 1  08 04 02 01  
0005F8r 1  80 40 20 10  	.byte $80, $40, $20, $10, $08, $04, $02, $01
0005FCr 1  08 04 02 01  
000600r 1  80 40 20 10  	.byte $80, $40, $20, $10, $08, $04, $02, $01
000604r 1  08 04 02 01  
000608r 1  80 40 20 10  	.byte $80, $40, $20, $10, $08, $04, $02, $01
00060Cr 1  08 04 02 01  
000610r 1  80 40 20 10  	.byte $80, $40, $20, $10, $08, $04, $02, $01
000614r 1  08 04 02 01  
000618r 1  80 40 20 10  	.byte $80, $40, $20, $10, $08, $04, $02, $01
00061Cr 1  08 04 02 01  
000620r 1  80 40 20 10  	.byte $80, $40, $20, $10, $08, $04, $02, $01
000624r 1  08 04 02 01  
000628r 1  80 40 20 10  	.byte $80, $40, $20, $10, $08, $04, $02, $01
00062Cr 1  08 04 02 01  
000630r 1  80 40 20 10  	.byte $80, $40, $20, $10, $08, $04, $02, $01
000634r 1  08 04 02 01  
000638r 1  80 40 20 10  	.byte $80, $40, $20, $10, $08, $04, $02, $01
00063Cr 1  08 04 02 01  
000640r 1               
000640r 1               
000640r 1               	.code
000000r 1               
000000r 1               ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
000000r 1               ;;;
000000r 1               ;;; _plot_pixel_256 & _plot_pixel_256_fast
000000r 1               ;;;
000000r 1               ;;; _plot_pixel_256 should be called the first time we plot on a
000000r 1               ;;; new row.  As long as we're plotting on the same row we can
000000r 1               ;;; call _plot_pixel_256_fast as the only item that changes is the
000000r 1               ;;; column.
000000r 1               ;;;
000000r 1               ;;; assumes yindexhi/lo are page aligned
000000r 1               ;;;
000000r 1               ;;; stomps: x, y, a
000000r 1               ;;; 39ish cycles
000000r 1               ;;;
000000r 1               _plot_pixel_256:
000000r 1  A5 E3        	lda yb
000002r 1  C5 F2        	cmp lasty
000004r 1  D0 0F        	bne _plot_pixel_256_calcaddr
000006r 1               _plot_pixel_256_fast:		; call this if we're writing to same row
000006r 1  A6 E2        	ldx xb
000008r 1  BC rr rr     	ldy	byteoffset256_table,x	; (4+)
00000Br 1  B9 FF FF     r:	lda	$ffff,y	    			; (4+) load screen byte
00000Er 1  1D rr rr     	ora	bitmask_table,x	    	; (4+) xor it with pixel bitmask
000011r 1  99 FF FF     w:	sta	$ffff,y	    			; (5) store it back to screen byte
000014r 1  60           	rts
000015r 1               _plot_pixel_256_calcaddr:
000015r 1  85 F2        	sta lasty					; store the lasty
000017r 1  A8           	tay			      			; (2) accum stores the row we're interested in
000018r 1  B9 rr rr     	lda	yindexhi,y	      		; (4+) get row address
00001Br 1  8D rr rr     	sta r+2
00001Er 1  8D rr rr     	sta w+2
000021r 1  B9 rr rr     	lda	yindexlo,y				; (4+)
000024r 1  8D rr rr     	sta w+1
000027r 1  8D rr rr     	sta r+1
00002Ar 1  4C rr rr     	jmp _plot_pixel_256_fast
00002Dr 1               
00002Dr 1               .macro plot_pixel_256_quick _row, _baseaddr
00002Dr 1                .ident(.sprintf("pp256q_%d", _row)):
00002Dr 1               	.local	w, r, b
00002Dr 1               	lda yindexlo + _row
00002Dr 1               	sta	r+1
00002Dr 1               	sta w+1
00002Dr 1               	lda yindexhi + _row
00002Dr 1               	sta r+2
00002Dr 1               	sta w+2
00002Dr 1               r:	lda $ffff
00002Dr 1               b:	ora bitmask_table,x
00002Dr 1               w:  sta $ffff
00002Dr 1               .endmacro
00002Dr 1               
00002Dr 1               
00002Dr 1               ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
00002Dr 1               ;;;
00002Dr 1               ;;; _init_fast
00002Dr 1               ;;;
00002Dr 1               ;;; create Y index arrays
00002Dr 1               ;;;
00002Dr 1               _init_fast:
00002Dr 1  A0 00        	ldy	#$00
00002Fr 1  A5 E0        	lda		basegfx
000031r 1  85 E6        	sta		argument
000033r 1  A5 E1        	lda		basegfx+1
000035r 1  85 E7        	sta		argument+1
000037r 1               if_loop:
000037r 1               	;;
000037r 1               	;; 	store address of line in argument
000037r 1               	;;
000037r 1  A5 E6        	lda	argument
000039r 1  99 rr rr     	sta	yindexlo,y
00003Cr 1  A5 E7        	lda	argument+1
00003Er 1  99 rr rr     	sta	yindexhi,y
000041r 1               	;;
000041r 1               	;; 	increment argument to next line
000041r 1               	;;
000041r 1  18           	clc
000042r 1  A5 E6        	lda	argument
000044r 1  69 28        	adc	#40
000046r 1  85 E6        	sta	argument
000048r 1  90 02        	bcc	if_skip
00004Ar 1  E6 E7        	inc	argument+1
00004Cr 1               if_skip:
00004Cr 1  C8           	iny
00004Dr 1  C0 C0        	cpy	#192
00004Fr 1  D0 E6        	bne	if_loop
000051r 1               
000051r 1  A9 FF        	lda #$ff
000053r 1  85 F2        	sta lasty
000055r 1               
000055r 1  A9 rr        	lda	#<byteoffset256_table
000057r 1  85 D6        	sta offset256
000059r 1  A9 rr        	lda #>byteoffset256_table
00005Br 1  85 D7        	sta	offset256+1
00005Dr 1  60           	rts
00005Er 1               
00005Er 1               
00005Er 1               back:
00005Er 1               
00005Er 1  AD rr rr 8D  .repeat 192, _the_row
000062r 1  rr rr 8D rr  
000066r 1  rr AD rr rr  
00149Er 1               plot_pixel_256_quick _the_row, basegfx
00149Er 1               .endrep
00149Er 1               
00149Er 1               	.data
000640r 1               
000640r 1  xx xx xx xx  	.align 256
000644r 1  xx xx xx xx  
000648r 1  xx xx xx xx  
000700r 1               
000700r 1               fptrlo:
000700r 1  rr rr rr rr  .repeat 192, _the_row
000704r 1  rr rr rr rr  
000708r 1  rr rr rr rr  
0007C0r 1               .byte <.ident(.sprintf("pp256q_%d", _the_row))
0007C0r 1               .endrep
0007C0r 1               
0007C0r 1  xx xx xx xx  	.align 256
0007C4r 1  xx xx xx xx  
0007C8r 1  xx xx xx xx  
000800r 1               
000800r 1               fptrhi:
000800r 1  rr rr rr rr  .repeat 192, _the_row
000804r 1  rr rr rr rr  
000808r 1  rr rr rr rr  
0008C0r 1               .byte >.ident(.sprintf("pp256q_%d", _the_row))
0008C0r 1               .endrep
0008C0r 1               
0008C0r 1               
0008C0r 1               
0008C0r 1               
0008C0r 1               
